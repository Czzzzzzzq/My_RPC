// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_protobuf_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_my_5fprotobuf_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_my_5fprotobuf_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_my_5fprotobuf_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_my_5fprotobuf_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_my_5fprotobuf_5fprotocol_2eproto;
namespace myrpc {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Id_Request_message;
struct Id_Request_messageDefaultTypeInternal;
extern Id_Request_messageDefaultTypeInternal _Id_Request_message_default_instance_;
class Id_Response_message;
struct Id_Response_messageDefaultTypeInternal;
extern Id_Response_messageDefaultTypeInternal _Id_Response_message_default_instance_;
class Name_Request_message;
struct Name_Request_messageDefaultTypeInternal;
extern Name_Request_messageDefaultTypeInternal _Name_Request_message_default_instance_;
class Name_Response_message;
struct Name_Response_messageDefaultTypeInternal;
extern Name_Response_messageDefaultTypeInternal _Name_Response_message_default_instance_;
}  // namespace myrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::myrpc::Header* Arena::CreateMaybeMessage<::myrpc::Header>(Arena*);
template<> ::myrpc::Id_Request_message* Arena::CreateMaybeMessage<::myrpc::Id_Request_message>(Arena*);
template<> ::myrpc::Id_Response_message* Arena::CreateMaybeMessage<::myrpc::Id_Response_message>(Arena*);
template<> ::myrpc::Name_Request_message* Arena::CreateMaybeMessage<::myrpc::Name_Request_message>(Arena*);
template<> ::myrpc::Name_Response_message* Arena::CreateMaybeMessage<::myrpc::Name_Response_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace myrpc {

// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myrpc.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myrpc.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kParameterSizeFieldNumber = 3,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string method_name = 2;
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // uint32 parameter_size = 3;
  void clear_parameter_size();
  uint32_t parameter_size() const;
  void set_parameter_size(uint32_t value);
  private:
  uint32_t _internal_parameter_size() const;
  void _internal_set_parameter_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:myrpc.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
    uint32_t parameter_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fprotobuf_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Id_Request_message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myrpc.Id_Request_message) */ {
 public:
  inline Id_Request_message() : Id_Request_message(nullptr) {}
  ~Id_Request_message() override;
  explicit PROTOBUF_CONSTEXPR Id_Request_message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Id_Request_message(const Id_Request_message& from);
  Id_Request_message(Id_Request_message&& from) noexcept
    : Id_Request_message() {
    *this = ::std::move(from);
  }

  inline Id_Request_message& operator=(const Id_Request_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id_Request_message& operator=(Id_Request_message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Id_Request_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Id_Request_message* internal_default_instance() {
    return reinterpret_cast<const Id_Request_message*>(
               &_Id_Request_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Id_Request_message& a, Id_Request_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Id_Request_message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Id_Request_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Id_Request_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Id_Request_message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Id_Request_message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Id_Request_message& from) {
    Id_Request_message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id_Request_message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myrpc.Id_Request_message";
  }
  protected:
  explicit Id_Request_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kRequestCodeFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 request_code = 2;
  void clear_request_code();
  int32_t request_code() const;
  void set_request_code(int32_t value);
  private:
  int32_t _internal_request_code() const;
  void _internal_set_request_code(int32_t value);
  public:

  // int32 id = 3;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:myrpc.Id_Request_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    int32_t request_code_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fprotobuf_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Id_Response_message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myrpc.Id_Response_message) */ {
 public:
  inline Id_Response_message() : Id_Response_message(nullptr) {}
  ~Id_Response_message() override;
  explicit PROTOBUF_CONSTEXPR Id_Response_message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Id_Response_message(const Id_Response_message& from);
  Id_Response_message(Id_Response_message&& from) noexcept
    : Id_Response_message() {
    *this = ::std::move(from);
  }

  inline Id_Response_message& operator=(const Id_Response_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id_Response_message& operator=(Id_Response_message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Id_Response_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Id_Response_message* internal_default_instance() {
    return reinterpret_cast<const Id_Response_message*>(
               &_Id_Response_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Id_Response_message& a, Id_Response_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Id_Response_message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Id_Response_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Id_Response_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Id_Response_message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Id_Response_message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Id_Response_message& from) {
    Id_Response_message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id_Response_message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myrpc.Id_Response_message";
  }
  protected:
  explicit Id_Response_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kNameFieldNumber = 3,
    kResponseCodeFieldNumber = 2,
  };
  // string info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 response_code = 2;
  void clear_response_code();
  int32_t response_code() const;
  void set_response_code(int32_t value);
  private:
  int32_t _internal_response_code() const;
  void _internal_set_response_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:myrpc.Id_Response_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t response_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fprotobuf_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Name_Request_message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myrpc.Name_Request_message) */ {
 public:
  inline Name_Request_message() : Name_Request_message(nullptr) {}
  ~Name_Request_message() override;
  explicit PROTOBUF_CONSTEXPR Name_Request_message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Name_Request_message(const Name_Request_message& from);
  Name_Request_message(Name_Request_message&& from) noexcept
    : Name_Request_message() {
    *this = ::std::move(from);
  }

  inline Name_Request_message& operator=(const Name_Request_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name_Request_message& operator=(Name_Request_message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Name_Request_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Name_Request_message* internal_default_instance() {
    return reinterpret_cast<const Name_Request_message*>(
               &_Name_Request_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Name_Request_message& a, Name_Request_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Name_Request_message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Name_Request_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Name_Request_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Name_Request_message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Name_Request_message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Name_Request_message& from) {
    Name_Request_message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name_Request_message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myrpc.Name_Request_message";
  }
  protected:
  explicit Name_Request_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kNameFieldNumber = 3,
    kRequestCodeFieldNumber = 2,
  };
  // string info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 request_code = 2;
  void clear_request_code();
  int32_t request_code() const;
  void set_request_code(int32_t value);
  private:
  int32_t _internal_request_code() const;
  void _internal_set_request_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:myrpc.Name_Request_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t request_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fprotobuf_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Name_Response_message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myrpc.Name_Response_message) */ {
 public:
  inline Name_Response_message() : Name_Response_message(nullptr) {}
  ~Name_Response_message() override;
  explicit PROTOBUF_CONSTEXPR Name_Response_message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Name_Response_message(const Name_Response_message& from);
  Name_Response_message(Name_Response_message&& from) noexcept
    : Name_Response_message() {
    *this = ::std::move(from);
  }

  inline Name_Response_message& operator=(const Name_Response_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name_Response_message& operator=(Name_Response_message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Name_Response_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Name_Response_message* internal_default_instance() {
    return reinterpret_cast<const Name_Response_message*>(
               &_Name_Response_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Name_Response_message& a, Name_Response_message& b) {
    a.Swap(&b);
  }
  inline void Swap(Name_Response_message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Name_Response_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Name_Response_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Name_Response_message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Name_Response_message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Name_Response_message& from) {
    Name_Response_message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name_Response_message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myrpc.Name_Response_message";
  }
  protected:
  explicit Name_Response_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kResponseCodeFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // int32 response_code = 2;
  void clear_response_code();
  int32_t response_code() const;
  void set_response_code(int32_t value);
  private:
  int32_t _internal_response_code() const;
  void _internal_set_response_code(int32_t value);
  public:

  // int32 id = 3;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:myrpc.Name_Response_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    int32_t response_code_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_my_5fprotobuf_5fprotocol_2eproto;
};
// ===================================================================

class UsersRpcService_Stub;

class UsersRpcService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UsersRpcService() {};
 public:
  virtual ~UsersRpcService();

  typedef UsersRpcService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Request_Id_to_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myrpc::Id_Request_message* request,
                       ::myrpc::Id_Response_message* response,
                       ::google::protobuf::Closure* done);
  virtual void Request_Name_to_Id(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myrpc::Name_Request_message* request,
                       ::myrpc::Name_Response_message* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UsersRpcService);
};

class UsersRpcService_Stub : public UsersRpcService {
 public:
  UsersRpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UsersRpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UsersRpcService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UsersRpcService ------------------------------------------

  void Request_Id_to_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myrpc::Id_Request_message* request,
                       ::myrpc::Id_Response_message* response,
                       ::google::protobuf::Closure* done);
  void Request_Name_to_Id(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myrpc::Name_Request_message* request,
                       ::myrpc::Name_Response_message* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UsersRpcService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string service_name = 1;
inline void Header::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& Header::service_name() const {
  // @@protoc_insertion_point(field_get:myrpc.Header.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Header.service_name)
}
inline std::string* Header::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:myrpc.Header.service_name)
  return _s;
}
inline const std::string& Header::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void Header::_internal_set_service_name(const std::string& value) {
  
  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_service_name() {
  
  return _impl_.service_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_service_name() {
  // @@protoc_insertion_point(field_release:myrpc.Header.service_name)
  return _impl_.service_name_.Release();
}
inline void Header::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  _impl_.service_name_.SetAllocated(service_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Header.service_name)
}

// string method_name = 2;
inline void Header::clear_method_name() {
  _impl_.method_name_.ClearToEmpty();
}
inline const std::string& Header::method_name() const {
  // @@protoc_insertion_point(field_get:myrpc.Header.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_method_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Header.method_name)
}
inline std::string* Header::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:myrpc.Header.method_name)
  return _s;
}
inline const std::string& Header::_internal_method_name() const {
  return _impl_.method_name_.Get();
}
inline void Header::_internal_set_method_name(const std::string& value) {
  
  _impl_.method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_method_name() {
  
  return _impl_.method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_method_name() {
  // @@protoc_insertion_point(field_release:myrpc.Header.method_name)
  return _impl_.method_name_.Release();
}
inline void Header::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  _impl_.method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_name_.IsDefault()) {
    _impl_.method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Header.method_name)
}

// uint32 parameter_size = 3;
inline void Header::clear_parameter_size() {
  _impl_.parameter_size_ = 0u;
}
inline uint32_t Header::_internal_parameter_size() const {
  return _impl_.parameter_size_;
}
inline uint32_t Header::parameter_size() const {
  // @@protoc_insertion_point(field_get:myrpc.Header.parameter_size)
  return _internal_parameter_size();
}
inline void Header::_internal_set_parameter_size(uint32_t value) {
  
  _impl_.parameter_size_ = value;
}
inline void Header::set_parameter_size(uint32_t value) {
  _internal_set_parameter_size(value);
  // @@protoc_insertion_point(field_set:myrpc.Header.parameter_size)
}

// -------------------------------------------------------------------

// Id_Request_message

// string info = 1;
inline void Id_Request_message::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& Id_Request_message::info() const {
  // @@protoc_insertion_point(field_get:myrpc.Id_Request_message.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Id_Request_message::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Id_Request_message.info)
}
inline std::string* Id_Request_message::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:myrpc.Id_Request_message.info)
  return _s;
}
inline const std::string& Id_Request_message::_internal_info() const {
  return _impl_.info_.Get();
}
inline void Id_Request_message::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* Id_Request_message::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* Id_Request_message::release_info() {
  // @@protoc_insertion_point(field_release:myrpc.Id_Request_message.info)
  return _impl_.info_.Release();
}
inline void Id_Request_message::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Id_Request_message.info)
}

// int32 request_code = 2;
inline void Id_Request_message::clear_request_code() {
  _impl_.request_code_ = 0;
}
inline int32_t Id_Request_message::_internal_request_code() const {
  return _impl_.request_code_;
}
inline int32_t Id_Request_message::request_code() const {
  // @@protoc_insertion_point(field_get:myrpc.Id_Request_message.request_code)
  return _internal_request_code();
}
inline void Id_Request_message::_internal_set_request_code(int32_t value) {
  
  _impl_.request_code_ = value;
}
inline void Id_Request_message::set_request_code(int32_t value) {
  _internal_set_request_code(value);
  // @@protoc_insertion_point(field_set:myrpc.Id_Request_message.request_code)
}

// int32 id = 3;
inline void Id_Request_message::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Id_Request_message::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Id_Request_message::id() const {
  // @@protoc_insertion_point(field_get:myrpc.Id_Request_message.id)
  return _internal_id();
}
inline void Id_Request_message::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Id_Request_message::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:myrpc.Id_Request_message.id)
}

// -------------------------------------------------------------------

// Id_Response_message

// string info = 1;
inline void Id_Response_message::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& Id_Response_message::info() const {
  // @@protoc_insertion_point(field_get:myrpc.Id_Response_message.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Id_Response_message::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Id_Response_message.info)
}
inline std::string* Id_Response_message::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:myrpc.Id_Response_message.info)
  return _s;
}
inline const std::string& Id_Response_message::_internal_info() const {
  return _impl_.info_.Get();
}
inline void Id_Response_message::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* Id_Response_message::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* Id_Response_message::release_info() {
  // @@protoc_insertion_point(field_release:myrpc.Id_Response_message.info)
  return _impl_.info_.Release();
}
inline void Id_Response_message::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Id_Response_message.info)
}

// int32 response_code = 2;
inline void Id_Response_message::clear_response_code() {
  _impl_.response_code_ = 0;
}
inline int32_t Id_Response_message::_internal_response_code() const {
  return _impl_.response_code_;
}
inline int32_t Id_Response_message::response_code() const {
  // @@protoc_insertion_point(field_get:myrpc.Id_Response_message.response_code)
  return _internal_response_code();
}
inline void Id_Response_message::_internal_set_response_code(int32_t value) {
  
  _impl_.response_code_ = value;
}
inline void Id_Response_message::set_response_code(int32_t value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:myrpc.Id_Response_message.response_code)
}

// string name = 3;
inline void Id_Response_message::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Id_Response_message::name() const {
  // @@protoc_insertion_point(field_get:myrpc.Id_Response_message.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Id_Response_message::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Id_Response_message.name)
}
inline std::string* Id_Response_message::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:myrpc.Id_Response_message.name)
  return _s;
}
inline const std::string& Id_Response_message::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Id_Response_message::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Id_Response_message::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Id_Response_message::release_name() {
  // @@protoc_insertion_point(field_release:myrpc.Id_Response_message.name)
  return _impl_.name_.Release();
}
inline void Id_Response_message::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Id_Response_message.name)
}

// -------------------------------------------------------------------

// Name_Request_message

// string info = 1;
inline void Name_Request_message::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& Name_Request_message::info() const {
  // @@protoc_insertion_point(field_get:myrpc.Name_Request_message.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Name_Request_message::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Name_Request_message.info)
}
inline std::string* Name_Request_message::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:myrpc.Name_Request_message.info)
  return _s;
}
inline const std::string& Name_Request_message::_internal_info() const {
  return _impl_.info_.Get();
}
inline void Name_Request_message::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* Name_Request_message::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* Name_Request_message::release_info() {
  // @@protoc_insertion_point(field_release:myrpc.Name_Request_message.info)
  return _impl_.info_.Release();
}
inline void Name_Request_message::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Name_Request_message.info)
}

// int32 request_code = 2;
inline void Name_Request_message::clear_request_code() {
  _impl_.request_code_ = 0;
}
inline int32_t Name_Request_message::_internal_request_code() const {
  return _impl_.request_code_;
}
inline int32_t Name_Request_message::request_code() const {
  // @@protoc_insertion_point(field_get:myrpc.Name_Request_message.request_code)
  return _internal_request_code();
}
inline void Name_Request_message::_internal_set_request_code(int32_t value) {
  
  _impl_.request_code_ = value;
}
inline void Name_Request_message::set_request_code(int32_t value) {
  _internal_set_request_code(value);
  // @@protoc_insertion_point(field_set:myrpc.Name_Request_message.request_code)
}

// string name = 3;
inline void Name_Request_message::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Name_Request_message::name() const {
  // @@protoc_insertion_point(field_get:myrpc.Name_Request_message.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Name_Request_message::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Name_Request_message.name)
}
inline std::string* Name_Request_message::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:myrpc.Name_Request_message.name)
  return _s;
}
inline const std::string& Name_Request_message::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Name_Request_message::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Name_Request_message::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Name_Request_message::release_name() {
  // @@protoc_insertion_point(field_release:myrpc.Name_Request_message.name)
  return _impl_.name_.Release();
}
inline void Name_Request_message::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Name_Request_message.name)
}

// -------------------------------------------------------------------

// Name_Response_message

// string info = 1;
inline void Name_Response_message::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& Name_Response_message::info() const {
  // @@protoc_insertion_point(field_get:myrpc.Name_Response_message.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Name_Response_message::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myrpc.Name_Response_message.info)
}
inline std::string* Name_Response_message::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:myrpc.Name_Response_message.info)
  return _s;
}
inline const std::string& Name_Response_message::_internal_info() const {
  return _impl_.info_.Get();
}
inline void Name_Response_message::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* Name_Response_message::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* Name_Response_message::release_info() {
  // @@protoc_insertion_point(field_release:myrpc.Name_Response_message.info)
  return _impl_.info_.Release();
}
inline void Name_Response_message::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:myrpc.Name_Response_message.info)
}

// int32 response_code = 2;
inline void Name_Response_message::clear_response_code() {
  _impl_.response_code_ = 0;
}
inline int32_t Name_Response_message::_internal_response_code() const {
  return _impl_.response_code_;
}
inline int32_t Name_Response_message::response_code() const {
  // @@protoc_insertion_point(field_get:myrpc.Name_Response_message.response_code)
  return _internal_response_code();
}
inline void Name_Response_message::_internal_set_response_code(int32_t value) {
  
  _impl_.response_code_ = value;
}
inline void Name_Response_message::set_response_code(int32_t value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:myrpc.Name_Response_message.response_code)
}

// int32 id = 3;
inline void Name_Response_message::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Name_Response_message::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Name_Response_message::id() const {
  // @@protoc_insertion_point(field_get:myrpc.Name_Response_message.id)
  return _internal_id();
}
inline void Name_Response_message::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Name_Response_message::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:myrpc.Name_Response_message.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace myrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_my_5fprotobuf_5fprotocol_2eproto
