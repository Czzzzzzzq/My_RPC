// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_protobuf_protocol.proto

#include "my_protobuf_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace myrpc {
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parameter_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Id_Request_message::Id_Request_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_code_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Id_Request_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Id_Request_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Id_Request_messageDefaultTypeInternal() {}
  union {
    Id_Request_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Id_Request_messageDefaultTypeInternal _Id_Request_message_default_instance_;
PROTOBUF_CONSTEXPR Id_Response_message::Id_Response_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Id_Response_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Id_Response_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Id_Response_messageDefaultTypeInternal() {}
  union {
    Id_Response_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Id_Response_messageDefaultTypeInternal _Id_Response_message_default_instance_;
PROTOBUF_CONSTEXPR Name_Request_message::Name_Request_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Name_Request_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Name_Request_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Name_Request_messageDefaultTypeInternal() {}
  union {
    Name_Request_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Name_Request_messageDefaultTypeInternal _Name_Request_message_default_instance_;
PROTOBUF_CONSTEXPR Name_Response_message::Name_Response_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_code_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Name_Response_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Name_Response_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Name_Response_messageDefaultTypeInternal() {}
  union {
    Name_Response_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Name_Response_messageDefaultTypeInternal _Name_Response_message_default_instance_;
}  // namespace myrpc
static ::_pb::Metadata file_level_metadata_my_5fprotobuf_5fprotocol_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_my_5fprotobuf_5fprotocol_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_my_5fprotobuf_5fprotocol_2eproto[1];

const uint32_t TableStruct_my_5fprotobuf_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myrpc::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myrpc::Header, _impl_.service_name_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Header, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Header, _impl_.parameter_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Request_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Request_message, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Request_message, _impl_.request_code_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Request_message, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Response_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Response_message, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Response_message, _impl_.response_code_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Id_Response_message, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Request_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Request_message, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Request_message, _impl_.request_code_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Request_message, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Response_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Response_message, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Response_message, _impl_.response_code_),
  PROTOBUF_FIELD_OFFSET(::myrpc::Name_Response_message, _impl_.id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::myrpc::Header)},
  { 9, -1, -1, sizeof(::myrpc::Id_Request_message)},
  { 18, -1, -1, sizeof(::myrpc::Id_Response_message)},
  { 27, -1, -1, sizeof(::myrpc::Name_Request_message)},
  { 36, -1, -1, sizeof(::myrpc::Name_Response_message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::myrpc::_Header_default_instance_._instance,
  &::myrpc::_Id_Request_message_default_instance_._instance,
  &::myrpc::_Id_Response_message_default_instance_._instance,
  &::myrpc::_Name_Request_message_default_instance_._instance,
  &::myrpc::_Name_Response_message_default_instance_._instance,
};

const char descriptor_table_protodef_my_5fprotobuf_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032my_protobuf_protocol.proto\022\005myrpc\"K\n\006H"
  "eader\022\024\n\014service_name\030\001 \001(\t\022\023\n\013method_na"
  "me\030\002 \001(\t\022\026\n\016parameter_size\030\003 \001(\r\"D\n\022Id_R"
  "equest_message\022\014\n\004info\030\001 \001(\t\022\024\n\014request_"
  "code\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\"H\n\023Id_Response_me"
  "ssage\022\014\n\004info\030\001 \001(\t\022\025\n\rresponse_code\030\002 \001"
  "(\005\022\014\n\004name\030\003 \001(\t\"H\n\024Name_Request_message"
  "\022\014\n\004info\030\001 \001(\t\022\024\n\014request_code\030\002 \001(\005\022\014\n\004"
  "name\030\003 \001(\t\"H\n\025Name_Response_message\022\014\n\004i"
  "nfo\030\001 \001(\t\022\025\n\rresponse_code\030\002 \001(\005\022\n\n\002id\030\003"
  " \001(\0052\257\001\n\017UsersRpcService\022K\n\022Request_Id_t"
  "o_name\022\031.myrpc.Id_Request_message\032\032.myrp"
  "c.Id_Response_message\022O\n\022Request_Name_to"
  "_Id\022\033.myrpc.Name_Request_message\032\034.myrpc"
  ".Name_Response_messageB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_my_5fprotobuf_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_my_5fprotobuf_5fprotocol_2eproto = {
    false, false, 595, descriptor_table_protodef_my_5fprotobuf_5fprotocol_2eproto,
    "my_protobuf_protocol.proto",
    &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_my_5fprotobuf_5fprotocol_2eproto::offsets,
    file_level_metadata_my_5fprotobuf_5fprotocol_2eproto, file_level_enum_descriptors_my_5fprotobuf_5fprotocol_2eproto,
    file_level_service_descriptors_my_5fprotobuf_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_my_5fprotobuf_5fprotocol_2eproto_getter() {
  return &descriptor_table_my_5fprotobuf_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_my_5fprotobuf_5fprotocol_2eproto(&descriptor_table_my_5fprotobuf_5fprotocol_2eproto);
namespace myrpc {

// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:myrpc.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.parameter_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    _this->_impl_.service_name_.Set(from._internal_service_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.parameter_size_ = from._impl_.parameter_size_;
  // @@protoc_insertion_point(copy_constructor:myrpc.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_name_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.parameter_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:myrpc.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.method_name_.Destroy();
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.parameter_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Header.service_name"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Header.method_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 parameter_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.parameter_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Header.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string method_name = 2;
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Header.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // uint32 parameter_size = 3;
  if (this->_internal_parameter_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_parameter_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string method_name = 2;
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // uint32 parameter_size = 3;
  if (this->_internal_parameter_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parameter_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:myrpc.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (from._internal_parameter_size() != 0) {
    _this->_internal_set_parameter_size(from._internal_parameter_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_name_, lhs_arena,
      &other->_impl_.service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  swap(_impl_.parameter_size_, other->_impl_.parameter_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_getter, &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_once,
      file_level_metadata_my_5fprotobuf_5fprotocol_2eproto[0]);
}

// ===================================================================

class Id_Request_message::_Internal {
 public:
};

Id_Request_message::Id_Request_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:myrpc.Id_Request_message)
}
Id_Request_message::Id_Request_message(const Id_Request_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Id_Request_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.request_code_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.request_code_, &from._impl_.request_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.request_code_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:myrpc.Id_Request_message)
}

inline void Id_Request_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.request_code_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Id_Request_message::~Id_Request_message() {
  // @@protoc_insertion_point(destructor:myrpc.Id_Request_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Id_Request_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.Destroy();
}

void Id_Request_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Id_Request_message::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc.Id_Request_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.ClearToEmpty();
  ::memset(&_impl_.request_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.request_code_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Id_Request_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Id_Request_message.info"));
        } else
          goto handle_unusual;
        continue;
      // int32 request_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.request_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Id_Request_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc.Id_Request_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Id_Request_message.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // int32 request_code = 2;
  if (this->_internal_request_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_code(), target);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc.Id_Request_message)
  return target;
}

size_t Id_Request_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc.Id_Request_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // int32 request_code = 2;
  if (this->_internal_request_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_code());
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Id_Request_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Id_Request_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Id_Request_message::GetClassData() const { return &_class_data_; }


void Id_Request_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Id_Request_message*>(&to_msg);
  auto& from = static_cast<const Id_Request_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:myrpc.Id_Request_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (from._internal_request_code() != 0) {
    _this->_internal_set_request_code(from._internal_request_code());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Id_Request_message::CopyFrom(const Id_Request_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc.Id_Request_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Id_Request_message::IsInitialized() const {
  return true;
}

void Id_Request_message::InternalSwap(Id_Request_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Id_Request_message, _impl_.id_)
      + sizeof(Id_Request_message::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Id_Request_message, _impl_.request_code_)>(
          reinterpret_cast<char*>(&_impl_.request_code_),
          reinterpret_cast<char*>(&other->_impl_.request_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Id_Request_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_getter, &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_once,
      file_level_metadata_my_5fprotobuf_5fprotocol_2eproto[1]);
}

// ===================================================================

class Id_Response_message::_Internal {
 public:
};

Id_Response_message::Id_Response_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:myrpc.Id_Response_message)
}
Id_Response_message::Id_Response_message(const Id_Response_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Id_Response_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.response_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.response_code_ = from._impl_.response_code_;
  // @@protoc_insertion_point(copy_constructor:myrpc.Id_Response_message)
}

inline void Id_Response_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.response_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Id_Response_message::~Id_Response_message() {
  // @@protoc_insertion_point(destructor:myrpc.Id_Response_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Id_Response_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.Destroy();
  _impl_.name_.Destroy();
}

void Id_Response_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Id_Response_message::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc.Id_Response_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.response_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Id_Response_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Id_Response_message.info"));
        } else
          goto handle_unusual;
        continue;
      // int32 response_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Id_Response_message.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Id_Response_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc.Id_Response_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Id_Response_message.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // int32 response_code = 2;
  if (this->_internal_response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_response_code(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Id_Response_message.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc.Id_Response_message)
  return target;
}

size_t Id_Response_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc.Id_Response_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 response_code = 2;
  if (this->_internal_response_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Id_Response_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Id_Response_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Id_Response_message::GetClassData() const { return &_class_data_; }


void Id_Response_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Id_Response_message*>(&to_msg);
  auto& from = static_cast<const Id_Response_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:myrpc.Id_Response_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_response_code() != 0) {
    _this->_internal_set_response_code(from._internal_response_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Id_Response_message::CopyFrom(const Id_Response_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc.Id_Response_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Id_Response_message::IsInitialized() const {
  return true;
}

void Id_Response_message::InternalSwap(Id_Response_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.response_code_, other->_impl_.response_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Id_Response_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_getter, &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_once,
      file_level_metadata_my_5fprotobuf_5fprotocol_2eproto[2]);
}

// ===================================================================

class Name_Request_message::_Internal {
 public:
};

Name_Request_message::Name_Request_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:myrpc.Name_Request_message)
}
Name_Request_message::Name_Request_message(const Name_Request_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Name_Request_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.request_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.request_code_ = from._impl_.request_code_;
  // @@protoc_insertion_point(copy_constructor:myrpc.Name_Request_message)
}

inline void Name_Request_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.request_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Name_Request_message::~Name_Request_message() {
  // @@protoc_insertion_point(destructor:myrpc.Name_Request_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Name_Request_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.Destroy();
  _impl_.name_.Destroy();
}

void Name_Request_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Name_Request_message::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc.Name_Request_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.request_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Name_Request_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Name_Request_message.info"));
        } else
          goto handle_unusual;
        continue;
      // int32 request_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.request_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Name_Request_message.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Name_Request_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc.Name_Request_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Name_Request_message.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // int32 request_code = 2;
  if (this->_internal_request_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_code(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Name_Request_message.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc.Name_Request_message)
  return target;
}

size_t Name_Request_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc.Name_Request_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 request_code = 2;
  if (this->_internal_request_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Name_Request_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Name_Request_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Name_Request_message::GetClassData() const { return &_class_data_; }


void Name_Request_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Name_Request_message*>(&to_msg);
  auto& from = static_cast<const Name_Request_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:myrpc.Name_Request_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_request_code() != 0) {
    _this->_internal_set_request_code(from._internal_request_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Name_Request_message::CopyFrom(const Name_Request_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc.Name_Request_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name_Request_message::IsInitialized() const {
  return true;
}

void Name_Request_message::InternalSwap(Name_Request_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.request_code_, other->_impl_.request_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Name_Request_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_getter, &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_once,
      file_level_metadata_my_5fprotobuf_5fprotocol_2eproto[3]);
}

// ===================================================================

class Name_Response_message::_Internal {
 public:
};

Name_Response_message::Name_Response_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:myrpc.Name_Response_message)
}
Name_Response_message::Name_Response_message(const Name_Response_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Name_Response_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.response_code_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.response_code_, &from._impl_.response_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.response_code_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:myrpc.Name_Response_message)
}

inline void Name_Response_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){}
    , decltype(_impl_.response_code_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Name_Response_message::~Name_Response_message() {
  // @@protoc_insertion_point(destructor:myrpc.Name_Response_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Name_Response_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_.Destroy();
}

void Name_Response_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Name_Response_message::Clear() {
// @@protoc_insertion_point(message_clear_start:myrpc.Name_Response_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.ClearToEmpty();
  ::memset(&_impl_.response_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.response_code_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Name_Response_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "myrpc.Name_Response_message.info"));
        } else
          goto handle_unusual;
        continue;
      // int32 response_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.response_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Name_Response_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrpc.Name_Response_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myrpc.Name_Response_message.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // int32 response_code = 2;
  if (this->_internal_response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_response_code(), target);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myrpc.Name_Response_message)
  return target;
}

size_t Name_Response_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myrpc.Name_Response_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // int32 response_code = 2;
  if (this->_internal_response_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_code());
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Name_Response_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Name_Response_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Name_Response_message::GetClassData() const { return &_class_data_; }


void Name_Response_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Name_Response_message*>(&to_msg);
  auto& from = static_cast<const Name_Response_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:myrpc.Name_Response_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (from._internal_response_code() != 0) {
    _this->_internal_set_response_code(from._internal_response_code());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Name_Response_message::CopyFrom(const Name_Response_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrpc.Name_Response_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name_Response_message::IsInitialized() const {
  return true;
}

void Name_Response_message::InternalSwap(Name_Response_message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Name_Response_message, _impl_.id_)
      + sizeof(Name_Response_message::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Name_Response_message, _impl_.response_code_)>(
          reinterpret_cast<char*>(&_impl_.response_code_),
          reinterpret_cast<char*>(&other->_impl_.response_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Name_Response_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_getter, &descriptor_table_my_5fprotobuf_5fprotocol_2eproto_once,
      file_level_metadata_my_5fprotobuf_5fprotocol_2eproto[4]);
}

// ===================================================================

UsersRpcService::~UsersRpcService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UsersRpcService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_my_5fprotobuf_5fprotocol_2eproto);
  return file_level_service_descriptors_my_5fprotobuf_5fprotocol_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UsersRpcService::GetDescriptor() {
  return descriptor();
}

void UsersRpcService::Request_Id_to_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myrpc::Id_Request_message*,
                         ::myrpc::Id_Response_message*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Request_Id_to_name() not implemented.");
  done->Run();
}

void UsersRpcService::Request_Name_to_Id(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myrpc::Name_Request_message*,
                         ::myrpc::Name_Response_message*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Request_Name_to_Id() not implemented.");
  done->Run();
}

void UsersRpcService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_my_5fprotobuf_5fprotocol_2eproto[0]);
  switch(method->index()) {
    case 0:
      Request_Id_to_name(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myrpc::Id_Request_message*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myrpc::Id_Response_message*>(
                 response),
             done);
      break;
    case 1:
      Request_Name_to_Id(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myrpc::Name_Request_message*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myrpc::Name_Response_message*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UsersRpcService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::myrpc::Id_Request_message::default_instance();
    case 1:
      return ::myrpc::Name_Request_message::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UsersRpcService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::myrpc::Id_Response_message::default_instance();
    case 1:
      return ::myrpc::Name_Response_message::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UsersRpcService_Stub::UsersRpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UsersRpcService_Stub::UsersRpcService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UsersRpcService_Stub::~UsersRpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void UsersRpcService_Stub::Request_Id_to_name(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myrpc::Id_Request_message* request,
                              ::myrpc::Id_Response_message* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UsersRpcService_Stub::Request_Name_to_Id(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myrpc::Name_Request_message* request,
                              ::myrpc::Name_Response_message* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace myrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::myrpc::Header*
Arena::CreateMaybeMessage< ::myrpc::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::myrpc::Id_Request_message*
Arena::CreateMaybeMessage< ::myrpc::Id_Request_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc::Id_Request_message >(arena);
}
template<> PROTOBUF_NOINLINE ::myrpc::Id_Response_message*
Arena::CreateMaybeMessage< ::myrpc::Id_Response_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc::Id_Response_message >(arena);
}
template<> PROTOBUF_NOINLINE ::myrpc::Name_Request_message*
Arena::CreateMaybeMessage< ::myrpc::Name_Request_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc::Name_Request_message >(arena);
}
template<> PROTOBUF_NOINLINE ::myrpc::Name_Response_message*
Arena::CreateMaybeMessage< ::myrpc::Name_Response_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myrpc::Name_Response_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
